function Shapes = assembleBoundaryShapes(Shapes)

    Ft  = sparse(Shapes.NJoint,1);  % init contraction force
    Fnc = sparse(Shapes.NJoint,1);  % init normal contact force
    Ftc = sparse(Shapes.NJoint,1);  % init tangent contact force
    F   = sparse(Shapes.NJoint,1);  % init global force vector
    
    % if Fem.options.isNonlinear && ~isempty(Fem.options.loadingFactor)
    %      %beta = Fem.OptFactor*Fem.options.loadingFactor;
    %     beta = Fem.options.loadingFactor;
    % else
    %     beta = 1;
    % end
    
    % % adding basic loads
    % if isfield(Fem.system,'Load') && ~Fem.options.isPrescribed
    %     F = beta * assembleLoadsFem(Fem);
    % end
    
    % % adding basic loads
    % if isfield(Fem.system,'Tendon') && ~Fem.options.isPrescribed
    %     F = beta * assembleTendonForces(Fem);
    % end
    
    % % adding basic loads
    % if isfield(Fem.system,'Pressure') && ~Fem.options.isPrescribed
    %     F = beta * assemblePressureForces(Fem);
    % end
    
    % adding contact loads
    if isfield(Shapes.system,'Contact') %&& ~Fem.options.isPrescribed
        [Fnc, Ftc, Knc, Ktc] = assembleContactShapes(Shapes);
        % Shapes.system.Tangent = Shapes.system.Tangent ... 
        %     + Knc + Ktc;
    end
    
    % % adding contact loads
    % if isfield(Fem.system,'Displace') && ~Fem.options.isPrescribed
    %     [ge, ce] = assembleDisplaceEq(Fem);
    %     cDofs   = find(ce);
    %     cMatrix = diag(ce);
    %     AllDofs    = 1:Fem.Dim*Fem.Mesh.NNode;
    %     % [FreeDofs] = setdiff(AllDofs,cDofs);
    %     [Ice,~]     = ismember(AllDofs(:),cDofs(:));
    
    %     Fem.system.cMatrix   = cMatrix(cDofs,qa);
    %     Fem.system.cResidual = ge(cDofs);
    %     Fem.system.Ic        = Ice;
    % end
    
    %
    Shapes.system.fContact = Fnc;
    Shapes.system.fTangent = Ftc;
    Shapes.system.fInput   = F + Ft + Fnc + Ftc;
    
end
    
    